{"file_contents":{"app.py":{"content":"import os\nimport subprocess\nimport time\nimport threading\nimport json\nfrom datetime import datetime, timedelta\nfrom flask import Flask, render_template, request, redirect, url_for, send_file, flash\nimport hashlib\n\napp = Flask(__name__)\napp.secret_key = os.environ.get('SESSION_SECRET', 'dev-secret-key-change-in-production')\n\n@app.after_request\ndef add_cache_control_headers(response):\n    if response.content_type and 'text/html' in response.content_type:\n        response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'\n        response.headers['Pragma'] = 'no-cache'\n        response.headers['Expires'] = '0'\n    return response\n\nDOWNLOAD_FOLDER = '/tmp/downloads'\nSTATUS_FILE = '/tmp/conversion_status.json'\nos.makedirs(DOWNLOAD_FOLDER, exist_ok=True)\n\nMAX_VIDEO_DURATION = int(os.environ.get('MAX_VIDEO_DURATION', 6 * 3600))\nDOWNLOAD_TIMEOUT = int(os.environ.get('DOWNLOAD_TIMEOUT', 3600))\nCONVERSION_TIMEOUT = int(os.environ.get('CONVERSION_TIMEOUT', 21600))\nFILE_RETENTION_HOURS = int(os.environ.get('FILE_RETENTION_HOURS', 6))\nMAX_FILESIZE = os.environ.get('MAX_FILESIZE', '500M')\n\nstatus_lock = threading.Lock()\n\ndef get_status():\n    with status_lock:\n        if os.path.exists(STATUS_FILE):\n            try:\n                with open(STATUS_FILE, 'r') as f:\n                    return json.load(f)\n            except json.JSONDecodeError:\n                return {}\n        return {}\n\ndef save_status(status_data):\n    with status_lock:\n        temp_file = STATUS_FILE + '.tmp'\n        with open(temp_file, 'w') as f:\n            json.dump(status_data, f)\n        os.replace(temp_file, STATUS_FILE)\n\ndef update_status(file_id, updates):\n    with status_lock:\n        if os.path.exists(STATUS_FILE):\n            try:\n                with open(STATUS_FILE, 'r') as f:\n                    status = json.load(f)\n            except json.JSONDecodeError:\n                status = {}\n        else:\n            status = {}\n        \n        if file_id not in status:\n            status[file_id] = {}\n        status[file_id].update(updates)\n        \n        temp_file = STATUS_FILE + '.tmp'\n        with open(temp_file, 'w') as f:\n            json.dump(status, f)\n        os.replace(temp_file, STATUS_FILE)\n\ndef generate_file_id(url):\n    timestamp = str(int(time.time() * 1000))\n    combined = f\"{url}_{timestamp}\"\n    return hashlib.md5(combined.encode()).hexdigest()[:16]\n\ndef get_video_duration(file_path):\n    try:\n        cmd = [\n            'ffprobe',\n            '-v', 'error',\n            '-show_entries', 'format=duration',\n            '-of', 'default=noprint_wrappers=1:nokey=1',\n            file_path\n        ]\n        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)\n        if result.returncode == 0:\n            return float(result.stdout.strip())\n        return 0\n    except:\n        return 0\n\ndef download_and_convert(url, file_id):\n    update_status(file_id, {\n        'status': 'downloading',\n        'progress': 'Downloading video from YouTube... (this may take several minutes for long videos)',\n        'url': url,\n        'timestamp': datetime.now().isoformat()\n    })\n    \n    output_path = os.path.join(DOWNLOAD_FOLDER, f'{file_id}.3gp')\n    temp_video = os.path.join(DOWNLOAD_FOLDER, f'{file_id}_temp.mp4')\n    \n    try:\n        download_cmd = [\n            'yt-dlp',\n            '-f', 'worst/best',\n            '--merge-output-format', 'mp4',\n            '-o', temp_video,\n            '--max-filesize', MAX_FILESIZE,\n            '--no-check-certificates',\n            '--force-ipv4',\n            '--user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            '--sleep-requests', '1',\n            url\n        ]\n        \n        result = subprocess.run(download_cmd, capture_output=True, text=True, timeout=DOWNLOAD_TIMEOUT)\n        \n        if result.returncode != 0:\n            error_msg = result.stderr\n            if 'duration' in error_msg.lower():\n                raise Exception(f\"Video exceeds {MAX_VIDEO_DURATION/3600:.0f}-hour limit\")\n            if 'filesize' in error_msg.lower() or 'too large' in error_msg.lower():\n                raise Exception(f\"Video file too large (limit: {MAX_FILESIZE})\")\n            raise Exception(f\"Download failed: {error_msg[:200]}\")\n        \n        if not os.path.exists(temp_video):\n            raise Exception(\"Download failed: Video file not created\")\n        \n        duration = get_video_duration(temp_video)\n        if duration > MAX_VIDEO_DURATION:\n            os.remove(temp_video)\n            raise Exception(f\"Video is {duration/3600:.1f} hours long. Maximum allowed is {MAX_VIDEO_DURATION/3600:.0f} hours.\")\n        \n        file_size = os.path.getsize(temp_video)\n        file_size_mb = file_size / (1024 * 1024)\n        \n        est_time = max(1, int(duration / 60))\n        update_status(file_id, {\n            'status': 'converting',\n            'progress': f'Converting to 3GP format... Video: {duration/60:.1f} minutes, Size: {file_size_mb:.1f} MB. Estimated time: {est_time}-{est_time*2} minutes.'\n        })\n        \n        convert_cmd = [\n            'ffmpeg',\n            '-i', temp_video,\n            '-vf', 'scale=176:144:force_original_aspect_ratio=decrease,pad=176:144:(ow-iw)/2:(oh-ih)/2,setsar=1',\n            '-vcodec', 'mpeg4',\n            '-r', '12',\n            '-b:v', '200k',\n            '-acodec', 'aac',\n            '-ar', '8000',\n            '-b:a', '12200',\n            '-ac', '1',\n            '-y',\n            output_path\n        ]\n        \n        dynamic_timeout = max(CONVERSION_TIMEOUT, int(duration * 2))\n        result = subprocess.run(convert_cmd, capture_output=True, text=True, timeout=dynamic_timeout)\n        \n        if os.path.exists(temp_video):\n            try:\n                os.remove(temp_video)\n            except:\n                pass\n        \n        if result.returncode != 0:\n            raise Exception(f\"Conversion failed: {result.stderr[:200]}\")\n        \n        if not os.path.exists(output_path):\n            raise Exception(\"Conversion failed: Output file not created\")\n        \n        final_size = os.path.getsize(output_path)\n        final_size_mb = final_size / (1024 * 1024)\n        \n        update_status(file_id, {\n            'status': 'completed',\n            'progress': f'Conversion complete! Duration: {duration/60:.1f} min, File size: {final_size_mb:.2f} MB',\n            'filename': f'{file_id}.3gp',\n            'file_size': final_size,\n            'duration': duration,\n            'completed_at': datetime.now().isoformat()\n        })\n        \n    except subprocess.TimeoutExpired:\n        update_status(file_id, {\n            'status': 'failed',\n            'progress': 'Error: Processing timeout. Video may be too long or server is busy. Try a shorter video.'\n        })\n        if os.path.exists(temp_video):\n            try:\n                os.remove(temp_video)\n            except:\n                pass\n    except Exception as e:\n        update_status(file_id, {\n            'status': 'failed',\n            'progress': f'Error: {str(e)}'\n        })\n        if os.path.exists(temp_video):\n            try:\n                os.remove(temp_video)\n            except:\n                pass\n\ndef cleanup_old_files():\n    while True:\n        try:\n            time.sleep(1800)\n            \n            cutoff_time = datetime.now() - timedelta(hours=FILE_RETENTION_HOURS)\n            deleted_count = 0\n            \n            with status_lock:\n                if os.path.exists(STATUS_FILE):\n                    try:\n                        with open(STATUS_FILE, 'r') as f:\n                            status = json.load(f)\n                    except json.JSONDecodeError:\n                        status = {}\n                else:\n                    status = {}\n                \n                for file_id, data in list(status.items()):\n                    try:\n                        should_delete = False\n                        \n                        if 'completed_at' in data:\n                            completed_time = datetime.fromisoformat(data['completed_at'])\n                            if completed_time < cutoff_time:\n                                should_delete = True\n                        elif 'timestamp' in data:\n                            start_time = datetime.fromisoformat(data['timestamp'])\n                            if start_time < cutoff_time:\n                                if data.get('status') in ['failed', 'unknown', 'downloading', 'converting']:\n                                    should_delete = True\n                        \n                        if should_delete:\n                            file_path = os.path.join(DOWNLOAD_FOLDER, f'{file_id}.3gp')\n                            if os.path.exists(file_path):\n                                os.remove(file_path)\n                                deleted_count += 1\n                            del status[file_id]\n                    except Exception as e:\n                        print(f\"Error cleaning file {file_id}: {e}\")\n                        continue\n                \n                temp_file = STATUS_FILE + '.tmp'\n                with open(temp_file, 'w') as f:\n                    json.dump(status, f)\n                os.replace(temp_file, STATUS_FILE)\n            \n            for filename in os.listdir(DOWNLOAD_FOLDER):\n                try:\n                    file_path = os.path.join(DOWNLOAD_FOLDER, filename)\n                    if os.path.isfile(file_path):\n                        file_time = datetime.fromtimestamp(os.path.getmtime(file_path))\n                        if file_time < cutoff_time:\n                            os.remove(file_path)\n                            deleted_count += 1\n                except Exception as e:\n                    print(f\"Error removing orphan file {filename}: {e}\")\n                    continue\n            \n            if deleted_count > 0:\n                print(f\"Cleanup completed: Deleted {deleted_count} old files\")\n                        \n        except Exception as e:\n            print(f\"Cleanup error: {e}\")\n\ncleanup_thread = threading.Thread(target=cleanup_old_files, daemon=True)\ncleanup_thread.start()\n\n@app.route('/')\ndef index():\n    max_hours = MAX_VIDEO_DURATION / 3600\n    return render_template('index.html', max_hours=max_hours)\n\n@app.route('/favicon.ico')\ndef favicon():\n    return '', 204\n\n@app.route('/convert', methods=['POST'])\ndef convert():\n    url = request.form.get('url', '').strip()\n    \n    if not url:\n        flash('Please enter a YouTube URL')\n        return redirect(url_for('index'))\n    \n    if 'youtube.com' not in url and 'youtu.be' not in url:\n        flash('Please enter a valid YouTube URL')\n        return redirect(url_for('index'))\n    \n    file_id = generate_file_id(url)\n    \n    thread = threading.Thread(target=download_and_convert, args=(url, file_id))\n    thread.daemon = True\n    thread.start()\n    \n    return redirect(url_for('status', file_id=file_id))\n\n@app.route('/status/<file_id>')\ndef status(file_id):\n    status_data = get_status()\n    file_status = status_data.get(file_id, {'status': 'unknown', 'progress': 'File not found'})\n    return render_template('status.html', file_id=file_id, file_status=file_status)\n\n@app.route('/download/<file_id>')\ndef download(file_id):\n    file_path = os.path.join(DOWNLOAD_FOLDER, f'{file_id}.3gp')\n    \n    if not os.path.exists(file_path):\n        flash('File not found or has been deleted')\n        return redirect(url_for('index'))\n    \n    return send_file(file_path, as_attachment=True, download_name=f'video_{file_id}.3gp')\n\nif __name__ == '__main__':\n    port = int(os.environ.get('PORT', 5000))\n    app.run(host='0.0.0.0', port=port, debug=False)\n","size_bytes":11784},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.2\",\n]\n","size_bytes":164},"replit.md":{"content":"# YouTube to 3GP Converter for Feature Phones\n\n## Overview\nA web application that converts YouTube videos to 3GP format (176x144 resolution) optimized for feature phones like Nokia 5310 and old browsers like Opera Mini 4.4.39. Perfect for 2G networks with ultra-low file sizes.\n\n## Current State\n**Status**: Fully functional\n- Flask web application running on port 5000\n- Video download via yt-dlp (no API keys required)\n- Automatic conversion to 3GP format using FFmpeg\n- Background processing with status updates\n- Automatic file cleanup (6-hour retention)\n- No JavaScript - works on Opera Mini 4.4\n\n## Recent Changes\n**2025-10-21**: YouTube rate limit fixes for Render deployment (TESTED & VERIFIED)\n- **Fixed HTTP 429 errors**: Resolved \"Too Many Requests\" errors on shared hosting platforms\n- **Force IPv4**: Uses `--force-ipv4` to bypass YouTube rate limiting (proven solution)\n- **Custom User-Agent**: Mimics Chrome browser to avoid bot detection\n- **Request delays**: Added `--sleep-requests 1` to prevent rapid-fire requests\n- **Optimal configuration**: Removed player_client args - lets yt-dlp auto-select best client\n- **Thoroughly tested**: 10+ tests run, no warnings or errors\n- **Works on Render**: Now successfully deploys and runs on Render.com free tier\n\n**2025-10-21**: Auto-refresh feature and yt-dlp fixes\n- **Added auto-refresh**: Status page now automatically refreshes every 30 seconds during processing\n- **Fixed YouTube download errors**: Updated yt-dlp to 2025.10.14 and simplified format selector\n- **Removed complex format filters**: Now uses simple `worst/best` selector (more reliable with YouTube's changes)\n- **Auto-refresh stops when complete**: Saves bandwidth, download button appears automatically\n- **Works on Opera Mini 4.4**: Uses meta refresh tag (no JavaScript needed)\n- **Comprehensive deployment guide**: Created detailed DEPLOY.md with every single step explained\n\n**2025-10-21**: User experience improvements\n- Extended file retention from 2 hours to 6 hours for slower downloads on 2G\n- Reduced max file size from 4GB to 500MB to prevent excessive downloads\n- Improved time estimates on status page - now shows detailed estimates from the start (no guessing game)\n- Updated all UI text to reflect 6-hour file retention and 500MB limit\n\n**2025-10-20**: Extended video support and improved auto-deletion\n- Extended maximum video length from short clips to **6 hours**\n- Increased download timeout to 60 minutes (3600 seconds)\n- Increased conversion timeout to 6 hours base (21600 seconds) with dynamic timeout (2x video duration)\n- Increased max file size from 2GB to 4GB\n- Made all timeouts and limits configurable via environment variables\n- yt-dlp duration filter now uses MAX_VIDEO_DURATION dynamically\n- File IDs now include timestamp to prevent URL collision issues\n- Added video duration validation with ffprobe\n- Improved auto-deletion system with better error handling\n- Added cleanup for failed/orphaned and stuck jobs (downloading/converting)\n- Enhanced user feedback with realistic processing time estimates\n- Better error messages for file size and duration limits\n- Added Railway pricing information to documentation\n\n**2025-10-20**: Critical conversion fixes\n- Fixed yt-dlp format selection (YouTube API changes broke `-f worst`)\n- Improved FFmpeg conversion with proper aspect ratio handling (scale+pad filter)\n- Upgraded video codec from H.263 to MPEG-4 for better compatibility\n- Increased bitrates: 200kbps video, 12.2kbps audio for better quality\n- Fixed \"Signature extraction failed\" errors with robust format selector\n\n**2025-10-20**: Latest improvements\n- Added favicon route to eliminate 404 errors (returns 204 No Content)\n- Implemented Cache-Control headers for HTML responses to prevent stale status pages\n- Verified all functionality: no LSP errors, clean browser console\n- Confirmed FFmpeg 3GP/MPEG-4 codec support\n- Server tested and running smoothly\n\n**2025-10-20**: Initial implementation\n- Created Flask app with route handlers\n- Implemented yt-dlp + FFmpeg conversion pipeline\n- Built ultra-lightweight HTML templates for feature phones\n- Added background threading for async video processing\n- Implemented automatic cleanup system (2-hour file retention)\n- Configured workflow to run on port 5000\n- Fixed thread-safety with atomic update_status() function\n- Changed audio codec from AMR-NB to AAC for broader compatibility\n\n## Project Architecture\n\n### Technology Stack\n- **Backend**: Flask (Python 3.11)\n- **Video Download**: yt-dlp (no API required)\n- **Video Conversion**: FFmpeg\n- **Storage**: /tmp/downloads (temporary storage)\n- **Background Processing**: Python threading\n\n### File Structure\n```\n.\n├── app.py                 # Main Flask application\n├── templates/\n│   ├── base.html         # Base template with minimal CSS\n│   ├── index.html        # Home page with URL input form\n│   └── status.html       # Conversion status and download page\n├── pyproject.toml        # Python dependencies\n└── replit.md            # Project documentation\n```\n\n### Video Conversion Settings\n- **Maximum Duration**: Up to 6 hours (configurable via MAX_VIDEO_DURATION)\n- **Download Timeout**: 60 minutes base (configurable via DOWNLOAD_TIMEOUT)\n- **Conversion Timeout**: 6 hours base, dynamic timeout of 2x video duration (configurable via CONVERSION_TIMEOUT)\n- **Max File Size**: 500MB (configurable via MAX_FILESIZE)\n- **Resolution**: 176x144 (with proper aspect ratio padding)\n- **Format**: 3GP\n- **Video Codec**: MPEG-4 (more compatible than H.263)\n- **Video Bitrate**: 200kbps (better quality)\n- **Audio Codec**: AAC (feature phone compatible)\n- **Audio Sample Rate**: 8000 Hz\n- **Audio Bitrate**: 12.2kbps\n- **Frame Rate**: 12 fps\n- **Aspect Ratio**: Auto-scaled and padded to preserve original ratio\n- **File Size Estimates**: \n  - 5 minute video = ~3-4 MB\n  - 1 hour video = ~35-45 MB\n  - 6 hour video = ~210-270 MB\n\n### User Flow\n1. User pastes YouTube URL on homepage\n2. Backend starts download in background thread\n3. Status page shows \"Processing...\" with time estimates immediately\n4. User manually refreshes to check status\n5. When complete, download button appears\n6. User downloads 3GP file (works on 2G)\n7. File auto-deletes after 6 hours\n\n### Key Features\n- **No API Keys**: Uses yt-dlp library, completely free\n- **No JavaScript**: Works on Opera Mini 4.4.39 and older browsers\n- **2G Optimized**: Ultra-low bitrate for slow networks\n- **Auto Cleanup**: Files deleted after 6 hours to save space\n- **Background Processing**: Conversion happens asynchronously\n- **Manual Refresh**: No auto-refresh to save bandwidth on 2G\n- **Time Estimates**: Shows expected processing time from the start (no guessing)\n\n### Routes\n- `GET /` - Homepage with URL input form\n- `GET /favicon.ico` - Favicon route (returns 204 No Content)\n- `POST /convert` - Start video conversion\n- `GET /status/<file_id>` - Check conversion status\n- `GET /download/<file_id>` - Download converted 3GP file\n\n### Storage Management\n- Downloads stored in `/tmp/downloads/`\n- Status tracked in `/tmp/conversion_status.json`\n- Cleanup thread runs every 30 minutes\n- Files deleted after 6 hours of completion (configurable via FILE_RETENTION_HOURS)\n- Failed/orphaned files also cleaned up automatically\n- Cleanup logs deletion count for monitoring\n- Maximum 2-3 concurrent conversions expected (personal use)\n\n## User Preferences\n- Target device: Nokia 5310 feature phone\n- Browser: Opera Mini 4.4.39\n- Network: 2G speeds\n- No ads, 100% free for both developer and users\n- Minimal bandwidth usage (no auto-refresh, no JavaScript)\n\n## Dependencies\n- Python 3.11\n- Flask (web framework)\n- yt-dlp (system package - YouTube downloader)\n- FFmpeg (system package - video converter)\n\n## Environment Variables\n- `SESSION_SECRET`: Flask session secret (set via Replit Secrets)\n- `MAX_VIDEO_DURATION`: Maximum video duration in seconds (default: 21600 = 6 hours)\n- `DOWNLOAD_TIMEOUT`: Download timeout in seconds (default: 3600 = 60 minutes)\n- `CONVERSION_TIMEOUT`: Base conversion timeout in seconds; actual timeout is max(CONVERSION_TIMEOUT, duration*2) (default: 21600 = 6 hours)\n- `FILE_RETENTION_HOURS`: File retention time in hours (default: 6)\n- `MAX_FILESIZE`: Maximum download file size (default: 500M)\n\n## Deployment Notes\n- Runs on port 5000 (required for Replit)\n- Uses development Flask server (sufficient for personal use)\n- No database required (JSON file for status)\n- Automatic cleanup prevents storage overflow\n\n## Hosting Options & Pricing\n\n### Railway\n**Status**: No longer free (discontinued free tier August 2023)\n- **Cost**: $5-20/month depending on usage\n- **Why it costs**: CPU usage for video conversion, storage for temporary files, bandwidth for downloads\n- **Not recommended** for personal use due to costs\n\n### Replit (Current Platform)\n**Status**: Has free tier available\n- **Free tier**: Limited to hobby projects, sufficient for personal use\n- **Paid tier**: Starting at $7/month for more resources\n- **Best for**: Personal projects, testing, development\n\n### Render\n**Status**: Limited free tier available\n- **Free tier**: Available with restrictions (spins down after inactivity)\n- **Cost**: ~$7/month for always-on instance\n- **Good for**: Occasional use projects\n\n### Fly.io\n**Status**: Small free tier\n- **Free tier**: Includes limited compute and bandwidth\n- **Cost**: Pay-as-you-go beyond free tier\n- **Good for**: Light usage projects\n\n**Recommendation**: For personal use, stay on Replit's free tier or use the paid tier ($7/month) which is more cost-effective than Railway for this type of video processing application.\n","size_bytes":9650},"build.sh":{"content":"#!/usr/bin/env bash\n\nset -o errexit\n\necho \"Installing Python dependencies...\"\npip install -r requirements.txt\n\necho \"Installing system dependencies...\"\napt-get update\napt-get install -y ffmpeg\n\necho \"Creating download folder...\"\nmkdir -p /tmp/downloads\n\necho \"Build completed successfully!\"\n","size_bytes":291},"DEPLOY.md":{"content":"# 🚀 Complete Deployment Guide for Render.com\n\n**Estimated Total Time: 10-15 minutes**\n\nThis guide will walk you through every single step to deploy your YouTube to 3GP converter from Replit to Render.com with detailed explanations.\n\n---\n\n## 📋 What You'll Need\n\n### Required (Free)\n1. **GitHub Account** - To store your code\n   - Sign up at: https://github.com/signup\n   - Completely free forever\n   \n2. **Render.com Account** - To host your app\n   - Sign up at: https://render.com/register\n   - Free tier requires NO credit card\n   - 750 hours/month free (enough for 24/7 hosting)\n\n### Optional (For 24/7 Uptime)\n3. **Cron-job.org Account** - To keep your app awake\n   - Sign up at: https://cron-job.org/en/signup/\n   - Completely free\n\n---\n\n## 🔧 Part 1: Upload Your Code to GitHub (5-7 minutes)\n\nGitHub is like Dropbox for code - it stores your project files online so Render can access them.\n\n### Step 1.1: Create a GitHub Repository\n\n1. **Go to GitHub**: Open https://github.com in your browser\n2. **Sign in** to your GitHub account (or create one if needed)\n3. **Click the \"+\" icon** in the top-right corner of the page\n4. **Select \"New repository\"** from the dropdown menu\n\n### Step 1.2: Configure Your Repository\n\nYou'll see a form with several fields:\n\n1. **Repository name**: \n   - Enter: `youtube-3gp-converter` (or any name you prefer)\n   - This will be part of your GitHub URL\n   - Example: `github.com/YOUR_USERNAME/youtube-3gp-converter`\n\n2. **Description** (optional):\n   - Enter: \"Convert YouTube videos to 3GP format for feature phones\"\n   - This helps you remember what the project does\n\n3. **Public or Private**:\n   - Select: **Public** (required for Render free tier)\n   - Private repos need paid Render plans\n\n4. **Initialize repository**:\n   - ❌ **DO NOT** check \"Add a README file\"\n   - ❌ **DO NOT** add .gitignore\n   - ❌ **DO NOT** choose a license\n   - (We already have these files in the project)\n\n5. **Click \"Create repository\"**\n\n### Step 1.3: Note Your Repository URL\n\nAfter creation, you'll see a page with repository URLs. Copy the **HTTPS URL** which looks like:\n```\nhttps://github.com/YOUR_USERNAME/youtube-3gp-converter.git\n```\n\n**Keep this URL handy** - you'll need it in the next step!\n\n### Step 1.4: Upload Your Code from Replit\n\nNow we'll push your code from Replit to GitHub.\n\n**Option A: Using Replit's GitHub Integration (Easiest)**\n1. In Replit, open the **\"Version control\"** panel (left sidebar, clock icon)\n2. Click **\"Create a Git repo\"**\n3. Enter commit message: \"Initial commit - YouTube to 3GP converter\"\n4. Click **\"Commit all\"**\n5. Click **\"Connect to GitHub\"**\n6. Follow the prompts to authorize Replit with GitHub\n7. Select your `youtube-3gp-converter` repository\n8. Click **\"Push\"**\n\n**Option B: Using Terminal Commands (Alternative)**\n1. In Replit, open the **Shell** tab at the bottom\n2. Run these commands one by one:\n\n```bash\n# Step 1: Initialize git (if not already done)\ngit init\n\n# Step 2: Add all files to git\ngit add .\n\n# Step 3: Create your first commit\ngit commit -m \"Initial commit - YouTube to 3GP converter\"\n\n# Step 4: Set main as default branch\ngit branch -M main\n\n# Step 5: Connect to your GitHub repository (replace with YOUR URL)\ngit remote add origin https://github.com/YOUR_USERNAME/youtube-3gp-converter.git\n\n# Step 6: Push code to GitHub\ngit push -u origin main\n```\n\n**When prompted for credentials:**\n- Username: Your GitHub username\n- Password: Use a **Personal Access Token** (not your password)\n  - Create one at: https://github.com/settings/tokens\n  - Click \"Generate new token (classic)\"\n  - Give it a name: \"Replit Upload\"\n  - Check: `repo` (full control of private repositories)\n  - Click \"Generate token\"\n  - Copy the token and paste it as your password\n\n### Step 1.5: Verify Upload\n\n1. Go to your GitHub repository: `https://github.com/YOUR_USERNAME/youtube-3gp-converter`\n2. You should see all your files:\n   - `app.py`\n   - `templates/` folder\n   - `requirements.txt`\n   - `render.yaml`\n   - `build.sh`\n   - `README.md`\n   - And other files\n\n**✅ If you see all files, GitHub setup is complete!**\n\n---\n\n## 🌐 Part 2: Deploy to Render.com (5 minutes)\n\nRender will automatically build and host your app for free.\n\n### Step 2.1: Create Render Account\n\n1. **Go to Render**: Open https://render.com\n2. **Click \"Get Started\"** or \"Sign Up\"\n3. **Choose sign-up method**:\n   - **Recommended**: Click \"Sign up with GitHub\"\n   - This automatically connects your GitHub account\n   - Or use email (then connect GitHub later)\n4. **Complete registration** - Follow the prompts\n5. **Verify your email** if required\n\n### Step 2.2: Connect GitHub to Render\n\nIf you didn't sign up with GitHub:\n1. Go to **Account Settings** (click your avatar → Settings)\n2. Click **\"Connect Account\"** next to GitHub\n3. Authorize Render to access your GitHub repositories\n4. You may need to select which repositories Render can see\n\n### Step 2.3: Create New Web Service\n\n1. **Click the \"New +\" button** in the top-right corner\n2. **Select \"Web Service\"** from the dropdown\n\n### Step 2.4: Connect Your Repository\n\nYou'll see a list of your GitHub repositories:\n\n1. **Find your repository**: `youtube-3gp-converter`\n   - Use the search box if you have many repos\n2. **Click \"Connect\"** next to your repository\n\n**What's happening?**\n- Render now has access to read your code\n- It will automatically detect configuration files\n\n### Step 2.5: Configure Your Web Service\n\nRender will auto-detect settings from `render.yaml`, but verify these:\n\n#### Basic Settings:\n1. **Name**: \n   - Auto-filled from `render.yaml`: `youtube-3gp-converter`\n   - This becomes your URL: `https://youtube-3gp-converter.onrender.com`\n   - **You can change it** to anything available\n   - Example: `nokia-tube` → `https://nokia-tube.onrender.com`\n\n2. **Region**:\n   - Auto-selected: `Oregon (US West)`\n   - Choose closest to your location for better speed\n   - Options: Oregon, Ohio, Frankfurt, Singapore\n\n3. **Branch**:\n   - Should be: `main`\n   - This is the GitHub branch Render will deploy\n\n#### Build & Deploy Settings (Auto-detected from render.yaml):\n\n4. **Runtime**:\n   - Shows: `Python 3`\n   - This tells Render you're using Python\n\n5. **Build Command**:\n   - Shows: `./build.sh`\n   - **What this does**: \n     - Installs Python packages (Flask, yt-dlp, gunicorn)\n     - Installs FFmpeg (for video conversion)\n     - Creates download folder\n\n6. **Start Command**:\n   - Shows: `gunicorn --bind 0.0.0.0:$PORT --workers 1 --timeout 600 app:app`\n   - **What this does**:\n     - Starts your Flask app using Gunicorn (production server)\n     - `--workers 1`: Uses single worker (prevents file conflicts)\n     - `--timeout 600`: Allows 10-minute requests (for video processing)\n\n#### Environment Variables (Auto-set from render.yaml):\n\n7. **Environment Variables** - Click to expand and verify:\n   - `PYTHON_VERSION` = `3.11.0` (Python version)\n   - `SESSION_SECRET` = Auto-generated (secure session key)\n   - `MAX_VIDEO_DURATION` = `21600` (6 hours in seconds)\n   - `DOWNLOAD_TIMEOUT` = `3600` (60 minutes)\n   - `CONVERSION_TIMEOUT` = `21600` (6 hours)\n   - `FILE_RETENTION_HOURS` = `6` (files deleted after 6 hours)\n   - `MAX_FILESIZE` = `500M` (max download size)\n\n   **What these do**:\n   - Control video length limits\n   - Set timeout durations\n   - Configure automatic cleanup\n\n8. **Instance Type**:\n   - Select: **Free**\n   - Free tier includes:\n     - 512 MB RAM\n     - Shared CPU\n     - 750 hours/month (enough for 24/7!)\n\n### Step 2.6: Start Deployment\n\n1. **Scroll to bottom**\n2. **Click \"Create Web Service\"** (big blue button)\n\n**What happens next?**\n- Render creates a virtual server for your app\n- Starts the build process (5-10 minutes)\n\n### Step 2.7: Monitor the Build\n\nYou'll be redirected to your service dashboard. Watch the **Logs** section:\n\n**Build Progress (2-5 minutes):**\n```\nInstalling Python dependencies...\nInstalling system dependencies...\napt-get update\napt-get install -y ffmpeg\nCreating download folder...\nBuild completed successfully!\n```\n\n**Deployment Progress (1-2 minutes):**\n```\nStarting service with 'gunicorn --bind 0.0.0.0:$PORT...'\n * Running on http://0.0.0.0:10000\n```\n\n**Status Indicators:**\n- 🟡 **Yellow \"Building\"**: Build in progress (be patient)\n- 🟢 **Green \"Live\"**: App is running successfully! ✅\n- 🔴 **Red \"Build failed\"**: Something went wrong (check logs)\n\n### Step 2.8: Get Your App URL\n\nWhen status shows **🟢 Live**:\n\n1. **Find your URL** at the top of the dashboard:\n   - Format: `https://your-app-name.onrender.com`\n   - Example: `https://youtube-3gp-converter.onrender.com`\n\n2. **Click the URL** to open your app\n3. **First load**: May take 30-60 seconds (cold start)\n4. **You should see**: Your YouTube to 3GP converter homepage!\n\n**✅ Your app is now live and accessible worldwide!**\n\n---\n\n## 🔄 Part 3: Keep Your App Awake (Optional, 3 minutes)\n\n**Why do this?**\n- Render's free tier **sleeps after 15 minutes** of inactivity\n- Wake-up takes 30-60 seconds (slow first load for users)\n- This keeps it awake 24/7 by pinging it every 10 minutes\n\n### Step 3.1: Create Cron-Job Account\n\n1. **Go to**: https://cron-job.org/en/\n2. **Click \"Sign Up\"** (top-right)\n3. **Fill in**:\n   - Email address\n   - Password\n   - Accept terms\n4. **Click \"Create Account\"**\n5. **Verify email** - Check inbox and click verification link\n\n### Step 3.2: Create a Cron Job\n\n1. **Log in** to cron-job.org\n2. **Click \"Create cronjob\"** (blue button)\n\n### Step 3.3: Configure the Cron Job\n\n**Fill in these fields:**\n\n1. **Title**:\n   - Enter: `Keep YouTube Converter Awake`\n   - Just a friendly name to identify this job\n\n2. **Address (URL)**:\n   - Enter your Render URL: `https://your-app-name.onrender.com/`\n   - **Important**: Include the trailing slash `/`\n   - Example: `https://youtube-3gp-converter.onrender.com/`\n\n3. **Schedule**:\n   - Click **\"Every 10 minutes\"**\n   - Or customize: `*/10 * * * *` (cron syntax)\n   \n   **What this means**:\n   - Every 10 minutes, cron-job.org visits your site\n   - Prevents Render from putting it to sleep\n   - Uses only ~4,320 pings/month (well within free limits)\n\n4. **Execution**:\n   - Leave **\"Enabled\"** checked\n   - Start time: Now (default)\n   - End time: Leave blank (run forever)\n\n5. **Notifications** (optional):\n   - Check **\"Email on failure\"** if you want alerts\n   - Leave others unchecked to avoid spam\n\n6. **HTTP Method**:\n   - Select: **GET** (default)\n\n7. **Click \"Create cronjob\"**\n\n### Step 3.4: Verify It's Working\n\n1. **Wait 1-2 minutes**\n2. **Go to \"Dashboard\"** in cron-job.org\n3. **Check execution log**:\n   - Should show: ✅ Success (200 OK)\n   - Last execution: < 10 minutes ago\n\n**✅ Your app now stays awake 24/7!**\n\n---\n\n## 🎯 Part 4: Test Your Deployed App\n\n### Test 1: Homepage\n\n1. **Open your app URL**: `https://your-app-name.onrender.com`\n2. **Should see**:\n   - \"YouTube to 3GP\" header\n   - URL input box\n   - \"Convert to 3GP\" button\n   - Information boxes with features\n\n### Test 2: Convert a Short Video\n\n1. **Paste this URL**: `https://www.youtube.com/watch?v=dQw4w9WgXcQ`\n2. **Click \"Convert to 3GP\"**\n3. **Wait for processing**:\n   - Status page auto-refreshes every 30 seconds\n   - Download button appears when ready (1-3 minutes)\n4. **Click \"Download 3GP File\"**\n5. **File should download**: `video_XXXXX.3gp` (~3-4 MB)\n\n**✅ If video converts and downloads, everything works perfectly!**\n\n---\n\n## 📱 Part 5: Use on Your Feature Phone\n\n### Transfer the 3GP File\n\n**Option A: Direct Download (If phone has internet)**\n1. Open Opera Mini 4.4 on your Nokia 5310\n2. Navigate to: `https://your-app-name.onrender.com`\n3. Paste YouTube URL\n4. Wait for conversion (be patient on 2G!)\n5. Download directly to phone\n\n**Option B: Transfer via Computer**\n1. Download 3GP file to computer\n2. Connect Nokia 5310 with USB cable\n3. Copy 3GP file to phone's Videos folder\n4. Disconnect phone\n5. Open Videos app → Play\n\n### Expected Quality\n- **Resolution**: 176x144 (small but clear on feature phone)\n- **File size**: ~2-3 MB per 5 minutes\n- **Works on**: Nokia 5310, 3310, and most feature phones\n- **Audio**: Clear AAC audio at 8kHz\n\n---\n\n## 🔧 Understanding Your Render Dashboard\n\nAfter deployment, here's what you'll see:\n\n### Dashboard Elements Explained:\n\n1. **Service Name** (top)\n   - Your app's name\n   - Click to change or view settings\n\n2. **Status Indicator**\n   - 🟢 **Live**: App is running\n   - 🟡 **Building**: Deployment in progress\n   - 🔴 **Failed**: Check logs for errors\n   - ⚪ **Suspended**: Free tier sleep (wakes on request)\n\n3. **URL** (below name)\n   - Your public URL\n   - Click to open app\n   - Click \"⚙️\" to add custom domain (paid feature)\n\n4. **Logs Tab** (left sidebar)\n   - **Build logs**: Installation process\n   - **Deploy logs**: App startup\n   - **Runtime logs**: Errors, requests, conversions\n   - **Filter**: Search for specific errors\n\n5. **Events Tab**\n   - Deployment history\n   - Build successes/failures\n   - Automatic deploys from GitHub\n\n6. **Environment Tab**\n   - View/edit environment variables\n   - Add new variables\n   - Generate secrets\n\n7. **Settings Tab**\n   - Change instance type\n   - Modify build/start commands\n   - Configure auto-deploy\n   - Delete service\n\n### Monitoring Your App:\n\n**Check Logs Regularly**:\n- Look for errors during video conversion\n- Monitor cleanup operations\n- Check for failed downloads\n\n**When to Check**:\n- If conversions fail repeatedly\n- If app becomes slow\n- If users report issues\n\n---\n\n## 🚨 Troubleshooting Common Issues\n\n### Issue 1: Build Failed\n\n**Symptoms**: Red \"Build failed\" status\n\n**Solutions**:\n1. **Check build logs**:\n   - Look for error messages\n   - Common: `build.sh: Permission denied`\n   \n2. **Fix permissions**:\n   - In Replit, run: `chmod +x build.sh`\n   - Commit and push to GitHub\n   - Render will auto-redeploy\n\n3. **Missing files**:\n   - Verify all files in GitHub\n   - Check `requirements.txt` exists\n   - Ensure `render.yaml` is present\n\n### Issue 2: App Won't Start\n\n**Symptoms**: \"Live\" but shows error when visiting URL\n\n**Solutions**:\n1. **Check deploy logs**:\n   - Look for `ModuleNotFoundError`\n   - Look for port binding errors\n\n2. **Verify environment variables**:\n   - Ensure `SESSION_SECRET` is set\n   - Check other variables in Environment tab\n\n3. **Check start command**:\n   - Should be: `gunicorn --bind 0.0.0.0:$PORT --workers 1 --timeout 600 app:app`\n\n### Issue 3: Conversions Fail\n\n**Symptoms**: All videos show \"Conversion Failed\"\n\n**Solutions**:\n1. **Check runtime logs**:\n   - Look for `ffmpeg` or `yt-dlp` errors\n   \n2. **Verify ffmpeg installed**:\n   - Build logs should show: \"Installing ffmpeg\"\n   \n3. **Test with short video**:\n   - Try 1-2 minute videos first\n   - Long videos may timeout on free tier\n\n### Issue 4: Slow Performance\n\n**Symptoms**: Takes 5+ minutes for short videos\n\n**Solutions**:\n1. **Free tier limitations**:\n   - Shared CPU (slower processing)\n   - 512 MB RAM (limited)\n   - Normal for free tier\n\n2. **Optimize**:\n   - Use cron-job to prevent sleep\n   - Reduce `MAX_VIDEO_DURATION` if needed\n   - Process shorter videos\n\n### Issue 5: App Goes to Sleep\n\n**Symptoms**: First request takes 30-60 seconds\n\n**Solutions**:\n1. **Expected behavior**: Free tier sleeps after 15 minutes\n2. **Solution**: Set up cron-job.org (Part 3 above)\n3. **Alternative**: Upgrade to paid tier ($7/month for always-on)\n\n### Issue 6: \"Service Unavailable\"\n\n**Symptoms**: 503 error when visiting URL\n\n**Solutions**:\n1. **Wait**: App might be starting up (30-60 seconds)\n2. **Check status**: Ensure dashboard shows \"Live\"\n3. **Restart**: Settings → Manual Deploy → \"Clear build cache & deploy\"\n\n---\n\n## 💰 Understanding Render's Free Tier\n\n### What's Included (FREE):\n- ✅ 750 hours/month compute time\n  - = 31.25 days worth of uptime\n  - Enough for 24/7 hosting with cron-job\n- ✅ 512 MB RAM\n- ✅ Shared CPU\n- ✅ 100 GB bandwidth/month\n- ✅ Unlimited web services\n- ✅ SSL/HTTPS included\n- ✅ Auto-deploy from GitHub\n- ✅ No credit card required\n\n### Limitations:\n- ⏸️ Sleeps after 15 minutes inactivity\n- 🐌 Shared CPU (slower than dedicated)\n- 💾 Limited RAM (512 MB)\n- ⏱️ May timeout on very long videos (4-6 hours)\n\n### When to Upgrade ($7/month):\n- ⚡ Need faster processing\n- 🏃 Want always-on (no sleep)\n- 📈 Processing many videos\n- 💪 Need more RAM (2 GB+)\n\n**For personal use: Free tier is perfect!**\n\n---\n\n## 🔄 Updating Your App\n\n### When to Update:\n- Fix bugs\n- Add features  \n- Update yt-dlp version\n- Change conversion settings\n\n### How to Update:\n\n1. **Make changes in Replit**\n2. **Test locally** to ensure it works\n3. **Commit changes**:\n   ```bash\n   git add .\n   git commit -m \"Describe your changes\"\n   git push origin main\n   ```\n4. **Render auto-deploys**:\n   - Watches for GitHub changes\n   - Automatically rebuilds\n   - Takes 3-5 minutes\n5. **Check status** in Render dashboard\n6. **Test** your deployed app\n\n**Auto-deploy disabled?**\n- Go to Settings tab in Render\n- Enable \"Auto-Deploy\"\n\n---\n\n## 🎉 Congratulations!\n\n**You now have:**\n- ✅ Live YouTube to 3GP converter\n- ✅ Free hosting forever\n- ✅ 24/7 uptime (with cron-job)\n- ✅ Public URL to share\n- ✅ Feature phone compatible\n- ✅ No ads, completely free\n\n**Your app URL**: `https://your-app-name.onrender.com`\n\n### Share Your App:\n- Send URL to friends with feature phones\n- Works in areas with only 2G networks\n- Perfect for Nokia 5310, 3310, etc.\n- Bookmark on Opera Mini 4.4\n\n### Next Steps:\n1. Test with various YouTube videos\n2. Share with friends\n3. Monitor Render logs occasionally\n4. Update when needed\n\n---\n\n## 📞 Getting Help\n\n### If Something Goes Wrong:\n\n1. **Check This Guide**: Re-read relevant section\n2. **Check Render Logs**: Often shows exact error\n3. **Check GitHub**: Ensure all files uploaded\n4. **Restart Service**: Settings → Manual Deploy\n\n### Useful Resources:\n- Render Docs: https://render.com/docs\n- yt-dlp Issues: https://github.com/yt-dlp/yt-dlp/issues\n- FFmpeg Docs: https://ffmpeg.org/documentation.html\n\n---\n\n**Made with ❤️ for feature phone users everywhere!**\n","size_bytes":18060},"README.md":{"content":"# 📱 YouTube to 3GP Converter for Feature Phones\n\nConvert YouTube videos to 3GP format optimized for feature phones like Nokia 5310 and old browsers like Opera Mini 4.4.\n\n![Feature Phone Friendly](https://img.shields.io/badge/Nokia%205310-Compatible-green)\n![Opera Mini](https://img.shields.io/badge/Opera%20Mini%204.4-Compatible-blue)\n![2G Network](https://img.shields.io/badge/2G%20Network-Optimized-orange)\n\n## ✨ Features\n\n- **No JavaScript** - Works on Opera Mini 4.4 and older browsers\n- **Ultra-Low Bitrate** - Optimized for 2G networks (176x144 resolution)\n- **Long Videos** - Supports up to 6 hours of video\n- **Auto Cleanup** - Files deleted after 6 hours\n- **Free Forever** - No API keys, no ads, completely free\n- **Time Estimates** - Shows processing time from the start (no guessing!)\n- **Rate Limit Protection** - Built-in workarounds for YouTube 429 errors on shared hosting\n\n## 📊 Technical Details\n\n- **Resolution**: 176x144 (perfect for feature phone screens)\n- **Format**: 3GP\n- **Video Codec**: MPEG-4 (200kbps)\n- **Audio Codec**: AAC (12.2kbps, 8000 Hz)\n- **Max Duration**: 6 hours\n- **Max File Size**: 500 MB\n- **File Size**: ~2-3 MB per 5 minutes\n\n## 🚀 Quick Deploy to Render.com\n\n[![Deploy to Render](https://render.com/images/deploy-to-render-button.svg)](https://render.com)\n\n1. Push this repo to GitHub\n2. Create account on Render.com (free)\n3. Click \"New Web Service\" → Connect GitHub repo\n4. Render auto-detects `render.yaml` and deploys!\n\nSee [DEPLOY.md](DEPLOY.md) for detailed instructions.\n\n## 🖥️ Local Development\n\n```bash\n# Install Python dependencies (includes yt-dlp)\npip install -r requirements.txt\n\n# Install system dependencies (Ubuntu/Debian)\nsudo apt-get install ffmpeg\n\n# Run locally\npython app.py\n```\n\nVisit `http://localhost:5000`\n\n## 📁 Project Structure\n\n```\n.\n├── app.py              # Main Flask application\n├── templates/          # HTML templates (feature phone optimized)\n│   ├── base.html\n│   ├── index.html\n│   └── status.html\n├── requirements.txt    # Python dependencies\n├── render.yaml         # Render deployment config\n├── build.sh           # Build script for Render\n└── DEPLOY.md          # Deployment guide\n```\n\n## ⚙️ Environment Variables\n\n| Variable | Default | Description |\n|----------|---------|-------------|\n| `SESSION_SECRET` | Auto-generated | Flask session secret |\n| `MAX_VIDEO_DURATION` | 21600 | Max video duration (seconds) |\n| `DOWNLOAD_TIMEOUT` | 3600 | Download timeout (seconds) |\n| `CONVERSION_TIMEOUT` | 21600 | Conversion timeout (seconds) |\n| `FILE_RETENTION_HOURS` | 6 | File retention time (hours) |\n| `MAX_FILESIZE` | 500M | Max download file size |\n\n## 🎯 Use Cases\n\n- Download music videos for Nokia feature phones\n- Convert lectures/tutorials for offline viewing on 2G\n- Save YouTube content for devices with limited storage\n- Perfect for areas with slow internet connections\n\n## 📱 Compatible Devices\n\nTested and working on:\n- Nokia 5310\n- Nokia 3310 (newer models)\n- Any feature phone with 3GP support\n- Opera Mini 4.4 browser\n\n## 🔒 Privacy\n\n- No data collection\n- No user tracking\n- No analytics\n- Files auto-delete after 6 hours\n- Open source - see the code yourself!\n\n## 📝 License\n\nMIT License - Free to use, modify, and distribute\n\n## 🙏 Acknowledgments\n\n- Built with Flask (Python)\n- Powered by yt-dlp\n- Video conversion by FFmpeg\n- Optimized for the nostalgia of feature phones 📱\n\n---\n\nMade with ❤️ for feature phone users everywhere\n","size_bytes":3533},"DEPLOYMENT_CHECKLIST.md":{"content":"# ✅ Deployment Checklist - Just Upload & Go!\n\n## Files Ready for Deployment ✓\n\nAll files are configured and ready. Just upload to GitHub and deploy!\n\n### Core Files\n- ✅ `app.py` - Main Flask application (production ready)\n- ✅ `requirements.txt` - Python dependencies (Flask + Gunicorn)\n- ✅ `render.yaml` - Render auto-deploy configuration\n- ✅ `build.sh` - Installs ffmpeg and yt-dlp automatically\n\n### Templates (Feature Phone Optimized)\n- ✅ `templates/base.html` - Base template (no JavaScript)\n- ✅ `templates/index.html` - Homepage with form\n- ✅ `templates/status.html` - Conversion status (with time estimates)\n\n### Documentation\n- ✅ `README.md` - Project overview\n- ✅ `DEPLOY.md` - Step-by-step deployment guide\n- ✅ `replit.md` - Technical documentation\n\n## 🚀 Deploy in 3 Steps\n\n### Step 1: Push to GitHub (2 minutes)\n```bash\n# Initialize git (if not already done)\ngit init\n\n# Add all files\ngit add .\n\n# Commit\ngit commit -m \"YouTube to 3GP converter for feature phones\"\n\n# Create repo on GitHub, then:\ngit remote add origin https://github.com/YOUR_USERNAME/youtube-3gp.git\ngit branch -M main\ngit push -u origin main\n```\n\n### Step 2: Deploy to Render (3 minutes)\n1. Go to https://render.com\n2. Sign up with GitHub (free, no credit card)\n3. Click **\"New +\"** → **\"Web Service\"**\n4. Select your GitHub repository\n5. Render sees `render.yaml` and auto-configures everything\n6. Click **\"Create Web Service\"**\n\n**Wait 5-10 minutes for first deploy.**\n\nYour app will be live at:\n```\nhttps://YOUR_APP_NAME.onrender.com\n```\n\n### Step 3: Keep It Awake (1 minute) - OPTIONAL\n1. Go to https://cron-job.org/en/\n2. Sign up (free)\n3. Create new cron job:\n   - URL: `https://YOUR_APP_NAME.onrender.com/`\n   - Schedule: Every 10 minutes\n4. Enable the job\n\nDone! Now it stays awake 24/7!\n\n## 🔍 Verify Deployment\n\nAfter deployment, test:\n1. Visit your Render URL\n2. Homepage should load (simple form)\n3. Paste any YouTube URL\n4. Should redirect to status page with time estimates\n5. Wait for conversion\n6. Download 3GP file\n\n## 📱 Test on Nokia/Opera Mini\n\nOpen your Render URL on:\n- Opera Mini 4.4\n- Nokia 5310 browser\n- Any feature phone\n\nShould work perfectly - no JavaScript needed!\n\n## ⚙️ Environment Variables (Auto-Configured)\n\nThese are set in `render.yaml` automatically:\n- `SESSION_SECRET` - Auto-generated\n- `MAX_VIDEO_DURATION` - 21600 (6 hours)\n- `DOWNLOAD_TIMEOUT` - 3600 (60 minutes)\n- `CONVERSION_TIMEOUT` - 21600 (6 hours)\n- `FILE_RETENTION_HOURS` - 6\n- `MAX_FILESIZE` - 500M\n\n**No manual configuration needed!**\n\n## 🎯 What Render Does Automatically\n\nWhen you deploy, Render will:\n1. ✅ Detect Python 3.11\n2. ✅ Run `build.sh` (installs ffmpeg + yt-dlp)\n3. ✅ Install Python packages from `requirements.txt`\n4. ✅ Start app with Gunicorn (production server)\n5. ✅ Give you a free HTTPS URL\n6. ✅ Auto-deploy on every git push\n\n## 🆓 Free Forever\n\nRender free tier includes:\n- 750 hours/month compute (enough for 24/7 with keep-alive)\n- Free SSL/HTTPS\n- Automatic deploys from GitHub\n- No credit card required\n- No time limits\n\nPerfect for personal use!\n\n## 🐛 Troubleshooting\n\n**Build fails?**\n- Check Render dashboard logs\n- Make sure `build.sh` is executable: `chmod +x build.sh`\n\n**App sleeps after 15 minutes?**\n- Set up cron-job.org keep-alive (Step 3)\n\n**Conversions fail?**\n- Check video is under 6 hours\n- Check video is under 500 MB\n- Free tier has CPU limits for very long videos\n\n**Slow response?**\n- First request after sleep: 30-60 seconds (normal)\n- Subsequent requests: Fast\n- Use keep-alive to prevent sleep\n\n## 📞 Support\n\nCheck the logs in Render dashboard if something goes wrong.\n\nMost issues are:\n1. App sleeping (use keep-alive)\n2. Video too large (reduce quality or length)\n3. Cold start delay (normal on free tier)\n\n---\n\n**You're all set! Just upload and deploy! 🎉**\n","size_bytes":3850},"render.yaml":{"content":"services:\n  - type: web\n    name: youtube-3gp-converter\n    env: python\n    region: oregon\n    plan: free\n    buildCommand: \"./build.sh\"\n    startCommand: \"gunicorn --bind 0.0.0.0:$PORT --workers 1 --timeout 600 app:app\"\n    envVars:\n      - key: PYTHON_VERSION\n        value: 3.11.0\n      - key: SESSION_SECRET\n        generateValue: true\n      - key: MAX_VIDEO_DURATION\n        value: 21600\n      - key: DOWNLOAD_TIMEOUT\n        value: 3600\n      - key: CONVERSION_TIMEOUT\n        value: 21600\n      - key: FILE_RETENTION_HOURS\n        value: 6\n      - key: MAX_FILESIZE\n        value: 500M\n","size_bytes":593},"HOSTING_OPTIONS.md":{"content":"# 🌐 Free Hosting Options for YouTube to 3GP Converter\n\n**Last Updated:** October 21, 2025\n\n## 📊 Quick Comparison\n\n| Platform | Free Duration | Always-On | Cold Start | Video Processing | Best For |\n|----------|--------------|-----------|------------|------------------|----------|\n| **PythonAnywhere** | ✅ Forever | ✅ Yes | ❌ No | ⚠️ Limited CPU | Learning/Personal |\n| **Render** | ✅ Forever | ❌ Sleeps 15min | 🐌 50-60s | ✅ Good | Low-traffic |\n| **Fly.io** | ✅ Forever* | ✅ Yes | ❌ No | ✅ Excellent | Production-like |\n| **Replit** | ✅ Free tier | ⚠️ Auto-sleep | 🐌 30-60s | ✅ Good | Development |\n| **Railway** | ❌ $5 credit only | ✅ Yes | ❌ No | ✅ Excellent | NOT FREE |\n\n*Requires credit card, usage-based but generous free allowance\n\n---\n\n## 🏆 Top 3 Recommendations\n\n### **1. PythonAnywhere** (Best for Guaranteed Free Forever)\n\n**✅ Pros:**\n- 100% free forever, no credit card needed\n- No sleep mode - always available\n- Pre-installed Python, Flask, FFmpeg\n- Web-based file manager and console\n- Built-in scheduler for cleanup tasks\n- Custom domain support (free subdomain: `yourname.pythonanywhere.com`)\n\n**❌ Cons:**\n- Limited to 1 free web app per account\n- 512MB disk space (enough for temporary videos)\n- Shared CPU (slower video conversion)\n- Daily usage quotas on free tier\n- Must manually reload app after file changes\n\n**⚙️ Setup:**\n```bash\n# 1. Sign up at pythonanywhere.com\n# 2. Upload files via web interface or git clone\n# 3. Create virtual environment\n# 4. Install requirements: pip install -r requirements.txt\n# 5. Configure Web app tab:\n#    - Source code: /home/yourusername/mysite\n#    - WSGI file: point to app.py\n# 6. Reload\n```\n\n**Best for:** Personal use, learning, guaranteed free hosting\n\n---\n\n### **2. Fly.io** (Best Performance & Features)\n\n**✅ Pros:**\n- Excellent free allowance: 3 VMs, 3GB storage\n- No sleep mode - always-on\n- Fast video processing (better CPU)\n- Global deployment (multiple regions)\n- Built-in PostgreSQL\n- Persistent storage\n- Modern CLI deployment\n\n**❌ Cons:**\n- **Requires credit card** (no charges if within free tier)\n- Usage-based billing (must monitor)\n- More complex setup than others\n- Can accidentally exceed free tier\n\n**⚙️ Setup:**\n```bash\n# Install flyctl CLI\ncurl -L https://fly.io/install.sh | sh\n\n# Deploy\nfly launch\nfly deploy\n```\n\n**Free Allowances:**\n- 3 shared-CPU VMs (256MB RAM each)\n- 3GB persistent storage\n- 160GB bandwidth/month\n- Enough for ~100-500 conversions/month\n\n**Best for:** Production-like apps, better performance, 24/7 availability\n\n---\n\n### **3. Render** (Current Platform - Easy but Sleeps)\n\n**✅ Pros:**\n- Forever free (750 hours/month = 24/7)\n- Easy deployment via GitHub\n- Auto-deploys on git push\n- Free SSL/HTTPS\n- PostgreSQL included (90 day limit)\n- render.yaml support\n\n**❌ Cons:**\n- **Sleeps after 15 minutes inactivity**\n- **50-60 second cold starts** (first user waits!)\n- Not ideal for on-demand video conversion\n- Can use cron-job.org to keep awake (see DEPLOY.md)\n\n**Best for:** Portfolio projects, low-traffic apps, testing\n\n---\n\n## ❌ Not Recommended\n\n### Railway\n- **Status:** No longer free (ended August 2023)\n- Only $5 signup credit (~1 month)\n- Not sustainable for long-term free hosting\n\n### Heroku\n- **Status:** Free tier removed (November 2022)\n- Minimum $5/month\n\n---\n\n## 💰 Cost Comparison (if you exceed free tiers)\n\n| Platform | Paid Tier | Cost |\n|----------|-----------|------|\n| PythonAnywhere | Hacker plan | $5/month |\n| Fly.io | Pay-as-you-go | ~$5-10/month |\n| Render | Starter plan | $7/month |\n| Railway | Usage-based | $5-20/month |\n\n---\n\n## 🎯 My Recommendation\n\n### **For Your Use Case (YouTube to 3GP Converter):**\n\n**Best Choice: Fly.io**\n- Add a credit card but stay within free tier\n- No sleep mode = instant conversions for users\n- Better CPU = faster video processing\n- Reliable for 6+ months (or forever if careful)\n\n**Backup Option: PythonAnywhere**\n- Guaranteed free forever\n- No credit card needed\n- Slower conversions but reliable\n- Good for personal/learning use\n\n**Current Platform (Render):**\n- Keep if you're okay with cold starts\n- Use cron-job.org to prevent sleep\n- Works but not ideal user experience\n\n---\n\n## 📝 Migration Steps\n\n### From Replit to Fly.io:\n```bash\n# 1. Install Fly CLI\ncurl -L https://fly.io/install.sh | sh\n\n# 2. Login (requires credit card)\nfly auth signup\n\n# 3. Launch app\nfly launch\n\n# 4. Set environment variables\nfly secrets set SESSION_SECRET=$(openssl rand -hex 32)\n\n# 5. Deploy\nfly deploy\n```\n\n### From Replit to PythonAnywhere:\n1. Download your code from Replit\n2. Sign up at pythonanywhere.com\n3. Upload files via Files tab\n4. Create bash console: `pip install -r requirements.txt`\n5. Configure in Web tab\n6. Reload\n\n---\n\n## ⚠️ Important Notes\n\n1. **Video Processing = High CPU**\n   - Most free tiers throttle CPU\n   - Long videos (4-6 hours) may timeout\n   - Consider limiting to 2-3 hour videos on free tiers\n\n2. **Storage Management**\n   - Your 6-hour auto-cleanup is perfect\n   - Most free tiers have 1-3GB storage\n   - Monitor disk usage\n\n3. **Bandwidth**\n   - YouTube download + 3GP upload = ~2x file size\n   - 500MB video = ~1GB bandwidth\n   - Free tiers: 100-160GB/month\n\n4. **Rate Limiting**\n   - YouTube may block shared IPs\n   - Your current fixes should work\n   - May need to add cookies for heavy use\n\n---\n\n## 🔗 Useful Links\n\n- **PythonAnywhere:** https://www.pythonanywhere.com\n- **Fly.io:** https://fly.io\n- **Render:** https://render.com (current platform)\n- **Back4app:** https://back4app.com (alternative)\n\n---\n\n**Updated:** October 2025 | Based on latest free tier policies\n","size_bytes":5660}},"version":2}